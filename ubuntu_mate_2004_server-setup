# Ubuntu MATE 20.04 Lab Server Setup Guide:
# The following instructions will assist in converting a Ubuntu MATE 20.04 amd64 desktop installation for use on a headless Dell PowerEdge server with an RDP accessible remote desktop.

### Post Install Common Steps:

## Get updates.
apt update && apt -y upgrade;

## Setup openssh-server
apt -y install openssh-server ubuntu-server xrdp dkms;
systemctl enable ssh;

### Enable password-less sudo for users in the sudo group:
sed -i 's/^%sudo.*ALL$/%sudo\tALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers;

### Setup SSH public key for password-less login:
install -d -o nbritton -g nbritton -m 700 /home/nbritton/.ssh;
curl -s https://launchpad.net/%7Enbritton/+sshkeys > /home/nbritton/.ssh/id_rsa.pub;
chown nbritton:nbritton /home/nbritton/.ssh/id_rsa.pub;
install -o nbritton -g nbritton -m 600 /home/nbritton/.ssh/id_rsa.pub /home/nbritton/.ssh/authorized_keys;

### Setup SSH client:
sed -i 's/^#   StrictHostKeyChecking ask/    StrictHostKeyChecking accept-new/' /etc/ssh/ssh_config;
sed -i 's/^#   Ciphers .*/    Ciphers aes128-gcm@openssh.com,aes256-gcm@openssh.com/' /etc/ssh/ssh_config;

### Disable password based remote SSH login:
sed -i 's/^#PasswordAuthentication yes$/PasswordAuthentication no/' /etc/ssh/sshd_config;
sed -i 's/^UsePAM yes$/#UsePAM yes/' /etc/ssh/sshd_config;

## Disable splash screen, quiet boot, CPU mitigations (i.g. meltdown, spectre), and IPv6.
sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1 mitigations=off"/' /etc/default/grub;
update-grub;

## Disable GUI on the system console:
systemctl disable graphical.target;
systemctl set-default multi-user.target;

## Configure xrdp for remote GUI access with MATE:
adduser xrdp ssl-cert;
systemctl restart xrdp;

### Install Mellanox OFED Packages for ConnectX-3/4/5 Networking Cards:
# Installing this will reset the NIC, so if your primary NIC is a Mellanox then don't run this remotely.
wget http://content.mellanox.com/ofed/MLNX_OFED-5.0-2.1.8.0/MLNX_OFED_LINUX-5.0-2.1.8.0-ubuntu20.04-x86_64.tgz;
tar -axf MLNX_OFED_LINUX-5.0-2.1.8.0-ubuntu20.04-x86_64.tgz;
cd MLNX_OFED_LINUX-5.0-2.1.8.0-ubuntu20.04-x86_64/;
apt -y install rdma-core tcl automake dpatch m4 swig chrpath autotools-dev bison libltdl-dev graphviz autoconf debhelper gfortran tk libgfortran4 quilt flex libnl-3-dev libnl-route-3-dev;
rmmod rdma_ucm ib_iser rpcrdma rdma_cm;
./mlnxofedinstall;

## Configure Mellanox Card:
mst start;
mlxconfig -d /dev/mst/mt4099_pciconf0 set SRIOV_EN=1 NUM_OF_VFS=4 LINK_TYPE_P1=2 LINK_TYPE_P2=2 BOOT_OPTION_ROM_EN_P1=0 BOOT_OPTION_ROM_EN_P2=0;
mlxconfig -d /dev/mst/mt4117_pciconf0 set SRIOV_EN=1 NUM_OF_VFS=4 UEFI_HII_EN=0 LEGACY_BOOT_PROTOCOL=0;
mlxconfig -d /dev/mst/mt4117_pciconf0.1 set SRIOV_EN=1 NUM_OF_VFS=4 UEFI_HII_EN=0 LEGACY_BOOT_PROTOCOL=0;

### Nvidia GPU Compute Drivers:
echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nouveau.conf;
apt install nvidia-headless-460 nvidia-utils-460;

### Enable KVM virtualization:
echo "options kvm-intel nested=y" >> /etc/modprobe.d/kvm.conf;
apt -y install bridge-utils cpu-checker libguestfs-rescue libguestfs-tools linux-tools-common linux-tools-generic numactl numad qemu-kvm qemu-system-common qemu-system-x86 qemu-utils virtinst virt-manager;

### Install various utilities and essential packages:
apt -y install bash-completion bash-doc bc build-essential chromium-browser command-not-found cpufrequtils fio htop httpie iftop iotop iozone3 iperf3 iputils-tracepath jq libgpgme11 libssh2-1 lldpad lm-sensors lsscsi mtr nano netdiscover net-tools ngrep nmap pcregrep powertop smartmontools socat speedtest-cli stress-ng sysstat vim zfsutils-linux;

### Install Dell OpenManage:
echo 'deb http://linux.dell.com/repo/community/openmanage/950/focal focal main' | sudo tee -a /etc/apt/sources.list.d/linux.dell.com.sources.list;
echo 'deb http://linux.dell.com/repo/community/openmanage/iSM/360/focal focal main' | sudo tee -a /etc/apt/sources.list.d/linux.dell.com.sources.list;
gpg --keyserver ha.pool.sks-keyservers.net --recv-key 1285491434D8786F;
gpg -a --export 1285491434D8786F | sudo apt-key add -;
apt update && apt -y install srvadmin-all syscfg dcism-osc;
apt -y install dcism;

### Force enable x2APIC mode:
sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="/GRUB_CMDLINE_LINUX_DEFAULT="intremap=no_x2apic_optout /' /etc/default/grub;
update-grub;

### Disable UFW - Firewall ###
systemctl disable ufw;
systemctl stop ufw;
ufw disable;
apt remove -y --purge ufw;

### Remove network manager, as we use networkd and netplan instead ###
apt remove -y --purge network-manager;

### Setup Network Dummy Interface ###
for i in $(seq 6); do printf "[NetDev]\nName=dummy${i}\nKind=dummy\n" > /etc/systemd/network/dummy${i}.netdev; done
systemctl restart systemd-networkd.service;

### Netplan configuration ###
rm /etc/netplan/01-network-manager-all.yaml;
cat << 'EOF' > /etc/netplan/01-netcfg.yaml
network:
  version: 2
  renderer: networkd

  ethernets:
    eno1: {mtu: 9000}
    eno2: {mtu: 9000}
    eno3: {mtu: 9000}
    eno4: {mtu: 9000}
    enp65s0: {mtu: 9000}
    enp65s0d1: {mtu: 9000}
    ibp3s0:
      addresses: [192.168.144.10/24]

  bonds:
    bond0:
      mtu: 9000
      interfaces: [enp65s0, enp65s0d1]
      parameters:
        mode: 802.3ad
        lacp-rate: fast
        mii-monitor-interval: 100
        transmit-hash-policy: layer3+4

  bridges:
    internet:
      mtu: 9000
      interfaces: [bond0]
      dhcp4: yes
      nameservers:
        addresses: [8.8.8.8, 1.1.1.1, 8.8.4.4, 1.0.0.1]
EOF
netplan apply;

### Install GlusterFS ###
apt install -y glusterfs-client glusterfs-common glusterfs-server;

### Wipe Storage (Distructive) ###
for disk in /dev/sd{b..v}; do wipefs -a ${disk}; done;

### Setup ZFS Storage Pool ###
zpool create -O recordsize=64k -O compression=on -O atime=off -o ashift=9 data raidz /dev/disk/by-path/pci-0000\:42\:00.0-scsi-0\:0\:{8..15}:0;

zfs create data/images;
zfs set mountpoint=/var/lib/libvirt/images data/images;
chmod a+rx /var/lib/libvirt/images;

### Setup Shared Storage Volumes ###
for disk in sd{p..v}; do parted --script --align optimal /dev/${disk} mklabel gpt mkpart primary xfs 0% 100% name 1 ${disk}; done;
for disk in /dev/sd{p..v}1; do mkfs.xfs -f ${disk}; done;
